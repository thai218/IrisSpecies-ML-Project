from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field, field_validator
import joblib
import numpy as np
import pandas as pd

# Load m√¥ h√¨nh

model = joblib.load(r"models\best_model.pkl")  #RF model
scaler = joblib.load(r"models\scaler.pkl")
encoder = joblib.load(r"models\label_encoder.pkl")
scaler_area = joblib.load(r"models\scaler_area.pkl")

# ‚úÖ In ra s·ªë l∆∞·ª£ng feature y√™u c·∫ßu
print("‚ö†Ô∏è Scaler expects", scaler.scale_.shape[0], "features")


# Kh·ªüi t·∫°o FastAPI
app = FastAPI(
    title="üåº Iris Classifier API",
    description="Nh·∫≠p c√°c th√¥ng s·ªë c√°nh & ƒë√†i hoa, API s·∫Ω d·ª± ƒëo√°n lo√†i hoa (Setosa, Versicolor, Virginica).",
    version="1.0"
)

# Ki·ªÉm tra API ƒëang ch·∫°y
@app.get("/health")
def health_check():
    return {"status": "‚úÖ API is active and running!"}

from fastapi.middleware.cors import CORSMiddleware

# CORS middleware 
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Schema ƒë·∫ßu v√†o
class IrisInput(BaseModel):
    sepal_length: float = Field(..., gt=0, le=10)
    sepal_width:  float = Field(..., gt=0, le=10)
    petal_length: float = Field(..., gt=0, le=10)
    petal_width:  float = Field(..., gt=0, le=10)

    # field_validator v·ªõi mode='before' ƒë·ªÉ l√†m tr√≤n ngay tr∆∞·ªõc validate
    @field_validator("*", mode="before")
    def round_two_decimals(cls, v):
        # L√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n cho nh·∫•t qu√°n
        return round(v, 2)


# Endpoint ch√≠nh
@app.post("/predict")
def predict_species(data: IrisInput):
    try:
        # 1. M·∫£ng 4 feature g·ªëc
        X_input = pd.DataFrame([{
            "sepal_length": data.sepal_length,
            "sepal_width": data.sepal_width,
            "petal_length": data.petal_length,
            "petal_width": data.petal_width
        }])
    
        # 2. Scale 4 feature g·ªëc
        X_scaled = scaler.transform(X_input)

        # 3. T√≠nh 2 feature area
        sepal_area = data.sepal_length * data.sepal_width
        petal_area = data.petal_length  * data.petal_width
        X_area = np.array([[sepal_area, petal_area]])

        # 4. Scale 2 feature area
        X_area_scaled = scaler_area.transform(X_area)

        # 5. Gh√©p l·∫°i th√†nh (1,6)
        X_final = np.hstack([X_scaled, X_area_scaled])

        # 6. D·ª± ƒëo√°n nh√£n
        y_pred = model.predict(X_final)

        # 6.1. D·ª± ƒëo√°n x√°c su·∫•t (ch·ªâ d√πng n·∫øu model h·ªó tr·ª£)
        y_proba = model.predict_proba(X_final)
        confidence = round(np.max(y_proba) * 100, 2)  # L·∫•y x√°c su·∫•t cao nh·∫•t

        # 7. Gi·∫£i m√£ nh√£n
        species = encoder.inverse_transform(y_pred)[0]

        return {
            "prediction": species,
            "confidence": confidence  # tr·∫£ th√™m ph·∫ßn trƒÉm
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))